Building Laravel and Vue.js Web Apps: Module 1: Introduction: Laravel and Vue.js--Achieving full-stack elegance:
- [Michael] With the number of PHP frameworks currently in existence, it was no small feat for Laravel to grow to become the most popular choice among PHP developers. Its powerful abstractions, built in security features, incredibly useful command line interface, and vibrant ecosystem allow us to build more robust applications while writing less code. Vue.js ships with Laravel and is included in all new projects as the default JavaScript framework. Vue makes it easy to create dynamic user interfaces, build single page applications, and manage state complexity using flux-like architectures.

All of which we'll implement in this course. I'm Mike Sullivan. I've been a professional web developer for over 15 years, and these days I'm quite happy with my frameworks of choice for backend and front-end development. Join me for this LinkedIn Learning course to find out how effective and rewarding it can be to build real-world applications with the power and elegance of Laravel and Vue.js.

Building Laravel and Vue.js Web Apps: Module 1: Introduction: Demo Project Overview:
- [Instructor] In this course we'll imagine that we've been hired by Nadia's Garden Restaurant to build out their website. We've been provided with HTML, CSS, and image assets, but they want us to build a dynamic site with a custom admin tool for editing the menu, which is the part of the site that will change most frequently. We'll set up a new Laravel project and integrate the Nadia's Garden design. We'll build a tool to manage the categories and control their appearance on the home page. Then we'll integrate the category manager into a larger single-page application for managing the entire menu with client side routing using Vue Router and state management using Vuex.

All supported by a robust and secure Laravel backend. Including a flexible API that can be used by third-party sites or apps. So if you're ready to find out how we'll put all this together with Laravel and Vue.js, then I`ll see you in chapter one.

Building Laravel and Vue.js Web Apps: Module 1: Installation and Configuration: Installing Homestead:
- [Instructor] In this video, we'll begin to set up a complete development environment fr Laravel in Vue.js. On the Laravel.com home page, if you click Documentation up here, one of the first things that you'll see mentioned is Laravel Homestead. Homestead is a virtual machine, actually an Ubuntu Linux machine, that comes prepackaged with everything you need to build websites with Laravel in Vue.js and run them locally. Homestead is a Vagrant box, which means we'll be using a piece of software called Vagrant to create and manage this virtual machine.

On the Get Started page, they mention that Vagrant alone can't handle everything. We also need a virtualization provider to actually run the virtual machine that we're going to manage with Vagrant. One good option in this list that's available on multiple platforms is VirtualBox. If you're trying to follow along and you haven't worked with Vagrant before, you may want to pause the video here while you install Vagrant and VirtualBox because I won't be going through that entire process, and it's straightforward for most users.

If you do hit any snags, I would suggest first carefully reading this Getting Started page and following the links, especially the one here for install the latest version of Vagrant. But one common gotcha that you'll see mentioned in the Laravel docs is in this red section down here. If you're a Windows user, you'll need to make sure that hardware virtualization is enabled in your BIOS settings. Now we're going to head over to the command line.

I'll be using PowerShell in this course. And if you're also using Windows, I would strongly suggest that whatever terminal you're using, that you launch it by right-clicking and choosing Run as administrator. Also, before I forget, I have a shortcut for Visual Studio Code down here, which we'll be using in this course, and I want to right-click that and choose Properties, Advanced, and make sure that Run as administrator is also checked here because if you don't do this, you will probably run into issues later on with permissions when we have to create symbolic links in our project, which are going to help us manage user uploaded files, such as images for the menu that we're going to build.

So in PowerShell, the first thing that I'm going to do is change to my user directory with cd tilde. And then we can find the command for adding the Homestead box to Vagrant in the Laravel docs. If I scroll down a little bit more, it's Vagrant box add laravel/homestead. So I'm going to copy that and paste it into PowerShell. And it's going to ask us what provider we're going to use and we'll enter 3 for VirtualBox.

This could take a couple minutes, so if you're following along, you may want to let that finish before you go on to the next video. If you've used Vagrant before, and you're hitting any snags at this point, then making sure you're using an up-to-date version of both Vagrant and VirtualBox can usually help sort out most issues. Now that we've added the Homestead box to Vagrant, we'll take a look at configuring and booting it in the next video.

Building Laravel and Vue.js Web Apps: Module 1: Installation and Configuration: Configuring and booting the virtual machine:
- [Instructor] To finish setting up Homestead, next we need to clone the Homestead repository on GitHub because that contains scripts we need to configure our virtual machine and boot it. We can find that Git clone command in the next section of the Homestead documentation here. So I'm going to copy this, and bring it over to PowerShell, but if you're on Windows using the normal command prompt or PowerShell, don't put the tilde slash here because it will actually create a directory named tilde. Even though you can do cd tilde to change your user directory, that won't work.

So I'm going to clone it like that, and next, we want to check out the latest stable version which we can find on the release page for that repo, and there's a link to it right here. So it looks like it's 7.19.2. I'm going to copy that which corresponds to a Git tag name, and by the way, you could also find that with Git tag on the command line. Let's cd to our cloned Homestead directory, and then do git checkout using that tag as a ref name.

The last thing we need to do before we add our custom settings and boot the machine is initialize Homestead, and that means creating a new Homestead YAML configuration file. If we look in the directory right now, we don't see Homestead.yaml, but we do see these init files here. On Windows, we would want to run the batch file, init.bat, and on Mac and Linux, you'll generally want to do bash init.sh. So I'm going to run init.bat.

Homestead is now initialized, and if we look again, now we do see that Homestead.yaml file. Let's open that up in Visual Studio Code by typing code Homestead.yaml, and if code has been added to your path, that should work. I'm going to enable AutoSave before I forget so that I don't have to keep saving after every change, and in VS Code, we can open up an integrated terminal with control backtick, and again, this is PowerShell for me.

Now we're going to create a new directory called Nadias for our Nadia's Garden Restaurant website. We're doing this now so that we can tell Vagrant to sync the files in this directory with a corresponding directory inside the virtual machine when it boots up. That way, we can edit code in Visual Studio Code on our host machine, but run that code inside the virtual guest machine. So in this YAML configuration file, we can map that directory that we just created to Nadia's directory under our Linux user directory, and you can see that that user is named Vagrant.

For the domain name, something.test is common, but I tend to use a subdomain like dev, and for Nadia's Garden Restaurant, I'm just going to use dev.nadias. Mapping that domain to the public directory in our synced folder, again not code, but nadias, that will configure that as the root directory in an NGINX configuration file for that domain, which is what we would want for a Laravel site. You could leave the database name as is, but I usually change it to something meaningful, so in this case nadias again.

Finally, we need to make sure that the domain name we chose is mapped to this local IP address for the box up here, which I'm going to copy now. We can do that by editing our host file, and on Windows, that should be at c:\Windows\system32\drivers\etc\hosts. On Mac and Linux, it's a little bit easier. It should just be at /etc/host.

So now I can pace that IP address, and make sure that dev.nadias is mapped to that. Back in the YAML file, we'll need to be able to connect to the VM using SSH, but if you don't already have an SSH key in this folder, you can just comment out the key section with control/, and Vagrant will create and manage the keys for you. So now, again, if we cd to Homestead, we're ready to boot the machine with Vagrant up.

This sometimes takes a couple minutes, so you can pause the video now if you're following along, and I think I'll probably stop reminding you to pause videos all the time since you can probably figure out when you need time to catch up. Now that it's booted up, Vagrant SSH should get us to the bash shell in Homestead, and here we are. In the next video, we'll create a new Laravel project and set up an authentication system.

Building Laravel and Vue.js Web Apps: Module 1: Installation and Configuration: Scaffolding an authentication system:
- [Instructor] In Homestead, the Laravel installer is already set up for us so to create a new project we can just do, Laravel new nadias. Because our sync nadias directory already exists, we'll want to add the force option to allow it to overwrite that empty directory. Once this is done, we can already navigate to http://dev.nadias, and we should be able to see the default Laravel site. The first thing we'll want to do with our new project, is add it to the VS code workspace.

So from the file menu, I'm going to do add folder to workspace, and in my user directory I'm going to want nadias. You'll find that most backend related items are under App, but not everything. For example, we have the routes folder down here, and lets take a look at web.php. And this is where we define routes that you can navigate to in the browser. Here we have one route route, slash, which serves the welcome view, which you can find in resources, views, welcome.blade.php.

Before we start building out our restaurant site, we're going to generate some user related tables, and authentication system. From inside the homestead box, we can use the infinitely useful Laravel command line interface called artisan. So cd to nadias, and for this task, we just need to do artisan make:auth. Now, if we look at web.php again, we have a /home route, because that's where the user will be redirected after registration or log in.

Also notice that a call to auth:routes has been added, and that's going to set up the routes that are related to log in and registration. We also have some new views under resources, views, off. If I refresh the home page, and click this register link that appears now, and fill out this form, I'm going to get an error though. And that's because we still don't have a users table in our database.

And it's also using homestead for the database name, and remember we want it to use nadias, so lets fix that first. Under config in database.php, this mysql connection is going to be the default and we can see that it's using the environment helper method to get the database name, and using forge as the default if it can't find that environment setting. Changing the default from forge won't fix this, we actually want to change it in our .env file in the route directory down here.

So we're going to change DB_DATABASE to nadias like we wanted, and while we're in here, lets also change APP_NAME to Nadia's Garden Restaurant and make sure you put it in double quotes, and we'll also change APP_URL to dev.nadias here. Next, to create users table, we just need to run the database migrations that have already been prepared for us, which are in the database/migrations directory.

These are like sql scripts written in php. One for creating the users table, and one for creating a password reset tokens table. One thing I want to add in the users table script for later, is a column for indicating an admin level user. This is going to be a bullion column, called is_admin, and we'll make sure that it defaults to false. We run the migrations, with artisan migrate.

Now if I go back, and try this again, I've created a user, and logged in. So now I can register, log in and log out, and in the next video we'll talk about using forgot password, and setting up email verification.

